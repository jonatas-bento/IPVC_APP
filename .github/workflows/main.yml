name: Build and Deploy .NET MAUI Android App

on:
  push:
    branches:
      - main
  workflow_dispatch:  

jobs:
  build:
    runs-on: self-hosted

    steps:

      # ‚úÖ Step 0: Fix Folder Ownership **Before Checkout**
      - name: Fix Workspace Permissions
        run: |
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R $USER:$USER $GITHUB_WORKSPACE
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 $GITHUB_WORKSPACE

      # ‚úÖ Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ‚úÖ Step 2: Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x
          
      # ‚úÖ Step 3: Install Android SDK & Accept Licenses
      # ‚úÖ Step 3: Install Android SDK & Accept Licenses (WITH SUDO)
      - name: Install Android SDK
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH

          # üîπ Ensure clean installation
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S rm -rf $ANDROID_HOME/cmdline-tools/latest
          
          # üîπ Setup proper permissions
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S mkdir -p $ANDROID_HOME/cmdline-tools
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R $USER:$USER $ANDROID_HOME
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 $ANDROID_HOME
      
          # üîπ Install dependencies
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S apt update
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S apt install unzip -y
      
          # üîπ Download & extract SDK tools
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip -o commandlinetools-linux-10406996_latest.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
      
          # üîπ Accept licenses
          echo -e "y\ny\ny\ny\ny\ny\n" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
          # üîπ Install required components
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "platforms;android-33" \
            "build-tools;30.0.3" \
            "build-tools;33.0.2"

      # ‚úÖ Step 4: Install .NET MAUI Workloads
      - name: Install .NET MAUI Workloads
        run: |
          export DOTNET_ROOT=/usr/share/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          if ! $DOTNET_ROOT/dotnet workload list | grep -q "maui-android"; then
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S $DOTNET_ROOT/dotnet workload install maui-android
          else
            echo "‚úÖ .NET MAUI Workload already installed!"
          fi

      # ‚úÖ Step 5: Restore Dependencies
      - name: Restore Dependencies
        run: |
          export DOTNET_ROOT=/usr/share/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          dotnet restore
      
      # ‚úÖ Step 6: Decode Keystore for Signing
      - name: Decode Keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > $HOME/android_keystore.jks
      
      # ‚úÖ Step 7: Build & Sign the App
      - name: Build Signed Android App Bundle
        run: |
          export DOTNET_ROOT=/usr/share/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH

          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S $DOTNET_ROOT/dotnet publish --configuration Release --no-restore \
            -f net7.0-android \
            -p:AndroidSdkDirectory=$ANDROID_HOME \
            -p:AndroidNdkDirectory=$ANDROID_HOME/ndk \
            -p:AndroidSdkPlatformToolsVersion=30.0.3 \
            -p:PublishTrimmed=false \
            -p:RunAOTCompilation=false \
            -p:AndroidPackageFormat=aab \
            -p:AndroidKeyStore=True \
            -p:AndroidSigningKeyStore=$HOME/android_keystore.jks \
            -p:AndroidSigningStorePass=${{ secrets.KEYSTORE_PASSWORD }} \
            -p:AndroidSigningKeyAlias=${{ secrets.KEY_ALIAS }} \
            -p:AndroidSigningKeyPass=${{ secrets.KEY_PASSWORD }}

      # ‚úÖ Step 8: Fix Ownership of Bin/Release to Prevent Errors
      - name: Fix Ownership of Bin/Release Folder
        run: |
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chown -R $USER:$USER $GITHUB_WORKSPACE/IPBVC_App/bin/Release
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 $GITHUB_WORKSPACE/IPBVC_App/bin/Release

      # ‚úÖ Step 9: Locate the .AAB File
      - name: Locate Generated AAB File
        run: |
          echo "Checking .aab files in output directories..."
          find $GITHUB_WORKSPACE -name "*.aab" || true

      # ‚úÖ Step 10: Move .AAB File to a Known Location
      - name: Move AAB to Workspace
        run: |
          AAB_PATH=$(find $GITHUB_WORKSPACE -name "*.aab" | head -n 1)
          if [ -z "$AAB_PATH" ]; then
            echo "‚ùå No .aab file found! Build may have failed."
            exit 1
          fi
          echo "‚úÖ Found AAB: $AAB_PATH"
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S mv "$AAB_PATH" "$GITHUB_WORKSPACE/app-release.aab"

      # ‚úÖ Step 11: Fix Ownership & Permissions for AAB File
      - name: Set Correct Permissions for AAB File
        run: |
          AAB_PATH=$(find $GITHUB_WORKSPACE -name "*.aab" | head -n 1)
      
          if [[ -f "$AAB_PATH" ]]; then
            echo "‚úÖ Found AAB: $AAB_PATH"
            echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 "$AAB_PATH"
          else
            echo "‚ùå ERROR: AAB file not found!"
            exit 1
          fi

       # ‚úÖ Step 12: Upload AAB as Artifact
      - name: Upload AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: |
            /home/jonatas-bento/actions-runner/_work/IPVC_APP/IPVC_APP/IPBVC_App/obj/Release/net7.0-android/android/bin/*.aab


      # ‚úÖ Step 13: Download the AAB Artifact
      - name: Download AAB Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-aab
          path: ${{ github.workspace }}

      # ‚úÖ Step 14: # Find the AAB file dynamically
      - name: Find the AAB
        run: |
          # Find the AAB file dynamically
          AAB_PATH=$(find $GITHUB_WORKSPACE -name "*.aab" | head -n 1)

          if [[ -f "$AAB_PATH" ]]; then
              echo "‚úÖ Found AAB: $AAB_PATH"
          else
              echo "‚ùå ERROR: AAB file not found!"
              exit 1
          fi
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 "$AAB_PATH"
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S chmod -R 777 "$AAB_PATH"

      # ‚úÖ Step 14: Verify the Downloaded AAB
      - name: Verify AAB File
        run: |
          if [ ! -f "${{ github.workspace }}/app-release.aab" ]; then
            echo "‚ùå AAB file not found after download!"
            exit 1
          fi
          echo "‚úÖ AAB file successfully downloaded."

      # ‚úÖ Step 15: Upload to Google Play
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_JSON }}
          packageName: "com.companyname.ipbvc_app"
          releaseFiles: "${{ github.workspace }}/app-release.aab"
          track: production
          status: completed
