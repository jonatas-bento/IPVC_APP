name: Build and Deploy .NET MAUI Android App

on:
  push:
    branches:
      - main  # Runs when code is pushed to the main branch
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: self-hosted

    steps:

      # ✅ Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ✅ Step 2: Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 7.0.x
          
      # ✅ Step 3: Install Android SDK & Accept Licenses (WITH SUDO)
      - name: Install Android SDK
        run: |
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH
          
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S apt update
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S apt install unzip -y
          
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip -o commandlinetools-linux-10406996_latest.zip -d $ANDROID_HOME/cmdline-tools
          mv $ANDROID_HOME/cmdline-tools/cmdline-tools $ANDROID_HOME/cmdline-tools/latest
          
          echo -e "y\ny\ny\ny\ny\ny\n" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
            "platform-tools" \
            "platforms;android-30" \
            "platforms;android-33" \
            "build-tools;30.0.3" \
            "build-tools;33.0.2"

      # ✅ Step 4: Install .NET MAUI Workloads (WITH SUDO)
      - name: Install .NET MAUI Workloads
        run: |
          export DOTNET_ROOT=/usr/share/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S $DOTNET_ROOT/dotnet workload install maui-android

      # ✅ Step 5: Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore
      
      # ✅ Step 6: Decode Keystore for Signing
      - name: Decode Keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > $HOME/android_keystore.jks
      
      # ✅ Step 7: Build & Sign the App
      - name: Build Signed Android App Bundle
        run: |
          export DOTNET_ROOT=/usr/share/dotnet
          export PATH=$DOTNET_ROOT:$PATH
          export ANDROID_HOME=$HOME/android-sdk
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH

          echo "${{ secrets.SUDO_PASSWORD }}" | sudo -S $DOTNET_ROOT/dotnet publish --configuration Release --no-restore \
            -f net7.0-android \
            -p:AndroidSdkDirectory=$ANDROID_HOME \
            -p:AndroidNdkDirectory=$ANDROID_HOME/ndk \
            -p:AndroidSdkPlatformToolsVersion=30.0.3 \
            -p:PublishTrimmed=false \
            -p:RunAOTCompilation=false \
            -p:AndroidPackageFormat=aab \
            -p:AndroidKeyStore=True \
            -p:AndroidSigningKeyStore=$HOME/android_keystore.jks \
            -p:AndroidSigningStorePass=${{ secrets.KEYSTORE_PASSWORD }} \
            -p:AndroidSigningKeyAlias=${{ secrets.KEY_ALIAS }} \
            -p:AndroidSigningKeyPass=${{ secrets.KEY_PASSWORD }}

      # ✅ Step 8: Locate the .AAB File
      - name: Locate Generated AAB File
        run: |
          echo "Checking .aab files in output directories..."
          find $GITHUB_WORKSPACE -name "*.aab" || true

      # ✅ Step 9: Move .AAB File to a Known Location
      - name: Move AAB to Workspace
        run: |
          AAB_PATH=$(find $GITHUB_WORKSPACE -name "*.aab" | head -n 1)
          if [ -z "$AAB_PATH" ]; then
            echo "❌ No .aab file found! Build may have failed."
            exit 1
          fi
          echo "✅ Found AAB: $AAB_PATH"
          mv "$AAB_PATH" "$GITHUB_WORKSPACE/app-release.aab"

      # ✅ Step 10: Fix Permissions for AAB File
      - name: Fix Permissions for AAB File
        run: |
          chmod 644 "$GITHUB_WORKSPACE/app-release.aab"

      # ✅ Step 11: Upload AAB as Artifact
      - name: Upload AAB as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: "$GITHUB_WORKSPACE/app-release.aab"

  deploy:
    needs: build
    runs-on: self-hosted
    steps:

      # ✅ Step 12: Download the AAB Artifact
      - name: Download AAB Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-aab
          path: ${{ github.workspace }}

      # ✅ Step 13: Verify the Downloaded AAB
      - name: Verify AAB File
        run: |
          if [ ! -f "${{ github.workspace }}/app-release.aab" ]; then
            echo "❌ AAB file not found after download!"
            exit 1
          fi
          echo "✅ AAB file successfully downloaded."

      # ✅ Step 14: Upload to Google Play
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ secrets.GOOGLE_PLAY_JSON }}
          packageName: "com.companyname.ipbvc_app"
          releaseFiles: "${{ github.workspace }}/app-release.aab"
          track: production
          status: completed
